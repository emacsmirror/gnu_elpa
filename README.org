#+title: Minibuffer Confines Transcended (mct.el)
#+author: Protesilaos Stavrou
#+email: info@protesilaos.com
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content
#+macro: stable-version 1.0.0
#+macro: release-date 2023-09-24
#+macro: development-version 1.1.0-dev
#+export_file_name: mct.texi
#+texinfo_filename: mct.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: MCT: (mct)
#+texinfo_dir_desc: Enhancement of the default minibuffer completion
#+texinfo_header: @set MAINTAINERSITE @uref{https://protesilaos.com,maintainer webpage}
#+texinfo_header: @set MAINTAINER Protesilaos Stavrou
#+texinfo_header: @set MAINTAINEREMAIL @email{info@protesilaos.com}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:info@protesilaos.com,contact the maintainer}

#+texinfo: @insertcopying

This manual, written by Protesilaos Stavrou, describes the customization
options for =mct= (or =mct.el= and variants), and provides every other piece
of information pertinent to it.

The documentation furnished herein corresponds to stable version
{{{stable-version}}}, released on {{{release-date}}}.  Any reference
to a newer feature which does not yet form part of the latest tagged
commit, is explicitly marked as such.

Current development target is {{{development-version}}}.

+ Package name (GNU ELPA): ~mct~
+ Official manual: <https://protesilaos.com/emacs/mct>
+ Change log: <https://protesilaos.com/emacs/mct-changelog>
+ Git repositories:
  + GitHub: <https://github.com/protesilaos/mct>
  + GitLab: <https://gitlab.com/protesilaos/mct>
+ Video demo: <https://protesilaos.com/codelog/2021-10-22-emacs-mct-demo/>
+ Backronym: Minibuffer Confines Transcended; Minibuffer and
  Completions in Tandem.

If you are viewing the README.org version of this file, please note
that the GNU ELPA machinery automatically generates an Info manual out
of it.

#+toc: headlines 8 insert TOC here, with eight headline levels

* COPYING
:PROPERTIES:
:COPYING: t
:CUSTOM_ID: h:efc32d6b-9405-4f3c-9560-3229b3ce3866
:END:

Copyright (C) 2021-2025  Free Software Foundation, Inc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being “A GNU Manual,” and
with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled “GNU Free Documentation License.”

(a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
modify this GNU manual.”
#+end_quote

* Installation
:PROPERTIES:
:CUSTOM_ID: h:1b501ed4-f16c-4118-9a4a-7a5e29143077
:END:

** Install the package
:PROPERTIES:
:CUSTOM_ID: h:a191dbaa-22f6-4ad6-8185-1de64fe0a9bc
:END:

=mct= is available on the official GNU ELPA archive for users of Emacs
version 29 or higher.  One can install the package without any further
configuration.  The following commands shall suffice:

#+begin_src emacs-lisp
M-x package-refresh-contents
M-x package-install RET mct
#+end_src

A package is also available via Guix:

#+begin_src sh
guix package -i emacs-mct
#+end_src

** Manual installation method
:PROPERTIES:
:CUSTOM_ID: h:663ec536-056b-443e-9272-2a365eb28b83
:END:

Assuming your Emacs files are found in =~/.emacs.d/=, execute the
following commands in a shell prompt:

#+begin_src sh
cd ~/.emacs.d

# Create a directory for manually-installed packages
mkdir manual-packages

# Go to the new directory
cd manual-packages

# Clone this repo and name it "mct"
git clone https://github.com/protesilaos/mct mct
#+end_src

Finally, in your =init.el= (or equivalent) evaluate this:

#+begin_src emacs-lisp
;; Make Elisp files in that directory available to the user.
(add-to-list 'load-path "~/.emacs.d/manual-packages/mct")
#+end_src

Everything is in place to set up the package.

* Sample setup
:PROPERTIES:
:CUSTOM_ID: h:318ba6f8-2909-44b0-9bed-558552722667
:END:
#+cindex: Sample configuration

Minimal setup for the minibuffer and in-buffer completion:

#+begin_src emacs-lisp
(use-package mct
  :ensure t
  :config
  (mct-mode 1))
#+end_src

And with more options:

#+begin_src emacs-lisp
(use-package mct
  :ensure t
  :config
  (setq mct-completion-window-size (cons #'mct-frame-height-third 1))
  (setq mct-remove-shadowed-file-names t) ; works when `file-name-shadow-mode' is enabled
  (setq mct-hide-completion-mode-line t)
  (setq mct-completing-read-multiple-indicator t)
  (setq mct-minimum-input 3)
  (setq mct-live-completion t)
  (setq mct-live-update-delay 0.6)

  ;; This is for commands or completion categories that should always pop
  ;; up the completions' buffer.  It circumvents the default method of
  ;; waiting for some user input (see `mct-minimum-input') before
  ;; displaying and updating the completions' buffer.
  (setq mct-completion-passlist
        '(;; Some commands
          select-frame-by-name
          Info-goto-node
          Info-index
          Info-menu
          vc-retrieve-tag
          ;; Some completion categories
          consult-buffer
          consult-location
          embark-keybinding
          imenu
          file
          project-file
          buffer
          kill-ring))

  ;; The blocklist follows the same principle as the passlist, except it
  ;; disables live completions altogether.
  (setq mct-completion-blocklist nil)

  ;; This is the default value but I am keeping it here for visibility.
  (setq mct-sort-by-command-or-category
        '((file . mct-sort-by-directory-then-by-file)
          ((magit-checkout vc-retrieve-tag) . mct-sort-by-alpha-then-by-length)
          ((kill-ring imenu consult-location Info-goto-node Info-index Info-menu) . nil) ; no sorting
          (t . mct-sort-by-history)))

  (mct-mode 1))
#+end_src

Other useful extras from the Emacs source code (read their doc strings):

#+begin_src emacs-lisp
;;; General settings for the minibuffer

(setq completion-styles '(basic substring initials flex partial-completion))
(setq completion-category-defaults nil)
(setq completion-category-overrides
      '((file (styles . (basic partial-completion initials substring)))))

(setq completion-cycle-threshold 2)
(setq completion-ignore-case t)
(setq completion-show-inline-help nil)

(setq completions-detailed t)

(setq enable-recursive-minibuffers t)
(setq minibuffer-eldef-shorten-default t)

(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)

(setq resize-mini-windows t)
(setq minibuffer-eldef-shorten-default t)

(file-name-shadow-mode 1)
(minibuffer-depth-indicate-mode 1)
(minibuffer-electric-default-mode 1)

;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))

(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;;; Minibuffer history

(use-package savehist
  :ensure t
  :config
  (savehist-mode 1))
#+end_src

* Overview of MCT
:PROPERTIES:
:CUSTOM_ID: h:ba224631-618c-4e52-b373-e46970cb2242
:END:
#+cindex: Overview of features

Minibuffer and Completions in Tandem, also known as "MCT", "Mct",
=mct=, or =mct.el=, is a package that enhances the default minibuffer
and =*Completions*= buffer of Emacs 29 (or higher) so that they work
together as part of a unified framework. The idea is to make the
presentation and overall functionality be consistent with other
popular, vertically aligned completion UIs while leveraging built-in
functionality.

The main feature set that unifies the minibuffer and the
=*Completions*= buffer consists of commands that cycle between the
two, making it seem like they are part of a contiguous space ([[#h:884d6702-8666-4d89-87a2-7d74843653f3][Basic usage]]).

MCT tries to find a middle ground between the frugal defaults and the
more opinionated completion UIs. This is most evident in its approach
on how to present completion candidates. Instead of showing them
outright or only displaying them on demand, MCT implements a minimum
input threshold as well as a slight delay before it pops up the
=*Completions*= buffer and starts updating it to respond to user
input. Additionally, it has user options to control when the
=*Completions*= appear, including a passlist and a blocklist:

- [[#h:334abfc2-85ce-4519-add5-5a3775dd5e12][Passlist for commands or completion categories]]
- [[#h:36f56245-281a-4389-a998-66778de100db][Blocklist for commands or completion categories]]

* Customizations
:PROPERTIES:
:CUSTOM_ID: h:6953b019-ab0c-4a08-8fd0-252c9cdb0dc2
:END:

MCT is highly configurable to adapt to the varying needs of users.  This
section documents each user option.

** Live completion
:PROPERTIES:
:CUSTOM_ID: h:1a85ed4c-f54d-482b-9915-563f60c64f15
:END:
#+vindex: mct-live-completion

Brief: Control auto-display and live-update of the =*Completions*= buffer.

Symbol: ~mct-live-completion~ (=choice= type)

Possible values:

1. ~nil~
2. ~t~ (default)
3. ~visible~

This user option governs the overall behaviour of MCT with regard to how
it uses the Completions' buffer:

+ When nil, the user has to manually request completions, using the
  regular activating commands ([[#h:884d6702-8666-4d89-87a2-7d74843653f3][Usage]]).  The Completions' buffer is never
  updated live to match user input.  Updating has to be handled
  manually.  This is like the out-of-the-box minibuffer completion
  experience.

+ When set to ~visible~, the Completions' buffer is live updated only if
  it is visible (present in a window).  The actual display of the
  completions is still handled manually.  For this reason, the ~visible~
  style does not read the ~mct-minimum-input~, meaning that it will always
  try to live update the visible completions, regardless of input length
  ([[#h:ea15357e-c9d3-4840-84fe-1374c9f36e28][Minimum input threshold]]).

+ When non-nil (the default), the Completions' buffer is automatically
  displayed once the ~mct-minimum-input~ is met and is hidden if the input
  drops below that threshold.  While visible, the buffer is updated live
  to match the user's input.

Note that every command or completion category that is declared in the
~mct-completion-passlist~ ignores this option altogether.  This means that
every such symbol will always show the Completions' buffer automatically
and will always update its contents live to match any further user input
([[#h:334abfc2-85ce-4519-add5-5a3775dd5e12][Passlist for commands or completion categories]]).  Same principle for
the ~mct-completion-blocklist~, which will always disable both the
automatic display and live updating of the Completions' buffer
([[#h:36f56245-281a-4389-a998-66778de100db][Blocklist for commands or completion categories]]).

[[#h:2fcf708f-4edf-41f3-9e29-0e750f3a80af][Size boundaries of the Completions]].

** Minimum input threshold
:PROPERTIES:
:CUSTOM_ID: h:ea15357e-c9d3-4840-84fe-1374c9f36e28
:END:
#+vindex: mct-minimum-input

Brief: Try to live update completions when input is >= N.

Symbol: ~mct-minimum-input~ (=natnum= type)

By default, MCT expects the user to type =3= characters before it tries to
compute completion candidates, display the =*Completions*= buffer and keep
it updated live to match any subsequent input.

Setting this user option to a value greater than 1 can help reduce the
total number of candidates that are being computed.  That is because the
Completions can consist of thousands of items that all need to be
rendered at once in a buffer.

In terms of the user experience, the minimum input threshold can make
sessions feel less visually demanding when the user (i) knows what they
are looking for and (ii) types fast enough so that the =*Completions*=
never have the time to pop up.

This variable is ignored for commands or completion categories that are
specified in the ~mct-completion-passlist~ and ~mct-completion-blocklist~.

[[#h:321ef12c-0f4a-440d-b88a-96e75325f3fc][Live updates per command or completion category]].

** Delay between live updates
:PROPERTIES:
:CUSTOM_ID: h:e342534b-db28-4f7b-9f4d-f2b65ab5189e
:END:
#+vindex: mct-live-update-delay

Brief: Delay in seconds before updating the Completions' buffer.

Symbol: ~mct-live-update-delay~ (=number= type)

The delay in seconds between live updates of the Completions' buffer.
The default value is =0.3=.

This variable is ignored for commands or completion categories that are
specified in the ~mct-completion-passlist~ and ~mct-completion-blocklist~.

[[#h:321ef12c-0f4a-440d-b88a-96e75325f3fc][Live updates per command or completion category]].

** Live updates per command or completion category
:PROPERTIES:
:CUSTOM_ID: h:321ef12c-0f4a-440d-b88a-96e75325f3fc
:END:
#+cindex: Passlist and blocklist of commands or completion categories

By default, MCT has the same behaviour across all types of completion.
Specifically, it respects the ~mct-live-completion~ option on whether and
when to perform live completion, the ~mct-minimum-input~ threshold before
doing so, and the ~mct-live-update-delay~ between changes to the
=*Completions*= buffer.

[[#h:36f56245-281a-4389-a998-66778de100db][Live completion]].

[[#h:ea15357e-c9d3-4840-84fe-1374c9f36e28][Minimum input threshold]].

[[#h:e342534b-db28-4f7b-9f4d-f2b65ab5189e][Delay between live updates]].

A passlist and a blocklist can override those options for the commands
or categories specified.

*** Passlist for commands or completion categories
:PROPERTIES:
:CUSTOM_ID: h:334abfc2-85ce-4519-add5-5a3775dd5e12
:END:
#+vindex: mct-completion-passlist

Brief: List of symbols where live completions are always enabled.

Symbol: ~mct-completion-passlist~ (=repeat symbol= type)

The value of this user option is a list of symbols.  Those can refer to
commands like ~find-file~ or completion categories such as ~file~, ~buffer~,
or what other packages define like Consult's ~consult-location~ category.

Any entry in the passlist ignores the value of ~mct-live-completion~ and
the ~mct-minimum-input~.  It also bypasses any possible delay introduced
by ~mct-live-update-delay~.  In other words, it immediately displays the
=*Completions*= buffer and instantly updates it to match user input.

When the ~mct-completion-blocklist~ and the ~mct-completion-passlist~
are in conflict, the former takes precedence.

[[#h:1f42c4e6-53c1-4e8a-81ef-deab70822fa4][Known completion categories]].

*** Blocklist for commands or completion categories
:PROPERTIES:
:CUSTOM_ID: h:36f56245-281a-4389-a998-66778de100db
:END:
#+vindex: mct-completion-blocklist

Brief: List of symbols where live completions are always disabled.

Symbol: ~mct-completion-blocklist~ (=repeat symbol= type)

The value of this user option is a list of symbols.  Those can refer to
commands like ~find-file~ or completion categories such as ~file~, ~buffer~,
or what other packages define like Consult's ~consult-location~ category.

This means that they ignore ~mct-live-completion~.  They do not
automatically display the Completions' buffer, nor do they update it to
match user input.

The Completions' buffer can still be accessed with commands that place
it in a window (such as ~mct-list-completions-toggle~,
~mct-switch-to-completions-top~).

When the ~mct-completion-blocklist~ and the ~mct-completion-passlist~
are in conflict, the former takes precedence.

Perhaps a less drastic measure is to set ~mct-minimum-input~ to an
appropriate value.  Or better use ~mct-completion-passlist~.

[[#h:1f42c4e6-53c1-4e8a-81ef-deab70822fa4][Known completion categories]].

*** Known completion categories
:PROPERTIES:
:CUSTOM_ID: h:1f42c4e6-53c1-4e8a-81ef-deab70822fa4
:END:

Below are the known completion categories that can be added to the
~mct-completion-passlist~ and ~mct-completion-blocklist~ (and relevant
custom code).  This resource is non-exhaustive and will be updated to
match available information.

+ ~bookmark~
+ ~buffer~
+ ~charset~
+ ~coding-system~
+ ~color~
+ ~command~ (e.g. =M-x=)
+ ~customize-group~
+ ~environment-variable~
+ ~expression~
+ ~face~
+ ~file~
+ ~function~ (the ~describe-function~ command bound to =C-h f=)
+ ~info-menu~
+ ~imenu~
+ ~input-method~
+ ~kill-ring~
+ ~library~
+ ~minor-mode~
+ ~multi-category~
+ ~package~
+ ~project-file~
+ ~symbol~ (the ~describe-symbol~ command bound to =C-h o=)
+ ~theme~
+ ~unicode-name~ (the ~insert-char~ command bound to =C-x 8 RET=)
+ ~variable~ (the ~describe-variable~ command bound to =C-h v=)

From the =consult= package:

+ ~consult-grep~
+ ~consult-isearch~
+ ~consult-isearch~
+ ~consult-kmacro~
+ ~consult-location~

From the =embark= package:

+ ~embark-keybinding~

In general, it is best not to add symbols which include several
thousands of candidates to the passlist.  So no ~command~, ~function~,
~symbol~, ~unicode-name~, ~variable~.

When in doubt, do not add a symbol to either the pass- or block- list.

[[#h:499ee65d-429d-48c0-9e3a-a60ca649e32d][Find completion category]].

*** Find completion category
:PROPERTIES:
:CUSTOM_ID: h:499ee65d-429d-48c0-9e3a-a60ca649e32d
:END:

While using a command that provides a minibuffer prompt, type =M-:= (the
~eval-expression~ command) and evaluate =(mct--completion-category)=.  It
will return the completion category, if any.  Note that this only works
when the variable ~enable-recursive-minibuffers~ is non-nil.

To review echo area messages, use =C-h e= (~view-echo-area-messages~).

[[#h:1f42c4e6-53c1-4e8a-81ef-deab70822fa4][Known completion categories]].

** Sort completions based on the command or completion category
:PROPERTIES:
:CUSTOM_ID: h:d5cd6e2e-d121-425c-96ec-f8bc9c630dd2
:END:
#+vindex: mct-sort-by-command-or-category
[ This is part of {{{development-version}}}. ]

Brief: Sort completion candidates based on the command or completion
category.

Symbol: ~mct-sort-by-command-or-category~ (=alist= type)

This is an alist where each element is of the form =(SYMBOLS . SORT-FUNCTION)=.

=SYMBOLS= is either a symbol or a list of symbols. =SYMBOLS= can refer to
the symbol of a function or completion category. It can also be ~t~,
which refers to the fallback value.

=SORT-FUNCTION= is a function that takes a list of strings and returns a
list of strings, sorting them accordingly. Examples of a =SORT-FUNCTION=
are:

#+findex: mct-sort-by-alpha
- ~mct-sort-by-alpha~

#+findex: mct-sort-by-alpha-then-by-length
- ~mct-sort-by-alpha-then-by-length~

#+findex: mct-sort-by-history
- ~mct-sort-by-history~

#+findex: mct-sort-by-directory-then-by-file
- ~mct-sort-by-directory-then-by-file~

To not perform any sorting on the completion candidates that match
=SYMBOLS= set =SORT-FUNCTION= to ~nil~.

If there are conflicting configurations between a =SYMBOLS= function and
completion category, then the function takes precedence (for example
~find-file~ is set to sort directories first whereas the ~file~
completion category is set to sort by history).

** Size boundaries of the Completions
:PROPERTIES:
:CUSTOM_ID: h:2fcf708f-4edf-41f3-9e29-0e750f3a80af
:END:
#+vindex: mct-completion-window-size

Brief: Set the maximum and minimum height of the Completions' buffer.

Symbol: ~mct-completion-window-size~ (=choice= type between nil and cons cell)

The value is a cons cell in the form of =(max-height . min-height)= where
each value is either a natural number or a function which returns such a
number.

The default maximum height of the window is calculated by the function
~mct--frame-height-fraction~, which finds the closest round number to
1/3 of the frame's height.  While the default minimum height is 1.  This
means that during live completions the Completions' window will shrink
or grow to show candidates within the specified boundaries.  To disable
this bouncing effect, set both max-height and min-height to the same
number.

If nil, do not try to fit the Completions' buffer to its window.

[[#h:1a85ed4c-f54d-482b-9915-563f60c64f15][Live completion]].

** Hide the Completions mode line
:PROPERTIES:
:CUSTOM_ID: h:36adcbbb-f534-4595-9629-babe38a35efc
:END:
#+vindex: mct-hide-completion-mode-line

Brief: Do not show a mode line in the Completions' buffer.

Symbol: ~mct-hide-completion-mode-line~ (=boolean= type)

By default, the =*Completions*= buffer has its own mode line, just like
every other window.  Set this user option to non-nil to remove the mode
line.

** Remove shadowed file paths
:PROPERTIES:
:CUSTOM_ID: h:9d637155-04a5-419e-a9c5-471258130057
:END:
#+vindex: mct-remove-shadowed-file-name

Brief: Delete shadowed parts of file names from the minibuffer.

Symbol: ~mct-remove-shadowed-file-names~ (=boolean= type)

When the built-in ~file-name-shadow-mode~ is enabled and this user option
is non-nil, MCT will delete the part of the file path that is shadowed
(meaning that it is overriden) by the given input.

For example, if the user types =~/= after a long path name, everything
preceding the =~/= is removed so the interactive selection process starts
again from the user's =$HOME=.

** Show an indicator for ~completing-read-multiple~ prompts
:PROPERTIES:
:CUSTOM_ID: h:211065de-6ea8-4cfd-b0a2-c1f28a5ae341
:END:
#+vindex: mct-completing-read-multiple-indicator

[ Part of {{{development-version}}}. ]

Brief: Show an indicator for ~completing-read-multiple~ prompts.

Symbol: ~mct-completing-read-multiple-indicator~ (=boolean= type)

When non-nil show an indicator for ~completing-read-multiple~ prompts.
If nil, do not show anything. Those prompts will look like the generic
ones.

The indicator informs the user this is a ~completing-read-multiple~
prompt and also shows the ~crm-separator~, which is usually a comma.

#+vindex: crm-prompt
The ~mct-completing-read-multiple-indicator~ has no effect on versions
of Emacs >= 31, as those have the user option ~crm-prompt~ which
covers the same use-case.

** MCT in the minibuffer and completion in regular buffers
:PROPERTIES:
:CUSTOM_ID: h:8109fe09-fcce-4212-88eb-943cc72f2c75
:END:

Emacs draws a distinction between two types of completion sessions:

+ Completion where the minibuffer is involved (such as to switch buffers
  or find a file).

+ Completion in a regular buffer to expand the text before point.  The
  minibuffer is not active.  We call this "in-buffer completion" or
  allude to the underlying function: ~completion-in-region~.

#+findex: mct-mode
The former scenario is what MCT has supported since its inception.
Enable ~mct-mode~ to get started.  There was a time where MCT also
supported in-buffer completion but this was discontinued in version
=1.0.0= of the package as Emacs 29 gained the requisite capabilities.
To get the familiar MCT key bindings for in-buffer completion, use
these in your init file:

#+begin_src emacs-lisp
;; Define the small wrapper functions
(defun my-mct-next-line-or-completion (n)
  "Select next completion or move to next line N times.
Select the next completion if `completion-in-region-mode' is
active and the Completions window is on display."
  (interactive "p")
  (if (and completion-in-region-mode (mct--get-completion-window))
      (minibuffer-next-completion n)
    (next-line n)))

(defun my-mct-previous-line-or-completion (n)
  "Select previous completion or move to previous line N times.
Select the previous completion if `completion-in-region-mode' is
active and the Completions window is on display."
  (interactive "p")
  (if (and completion-in-region-mode (mct--get-completion-window))
      (minibuffer-previous-completion n)
    (previous-line n)))

(defun my-mct-return-or-choose-completion (n)
  "Choose current completion or create N newlines.
Choose the current completion if `completion-in-region-mode' is
active and the Completions window is on display."
  (interactive "p")
  (if (and completion-in-region-mode (mct--get-completion-window))
      (minibuffer-choose-completion)
    (newline n :interactive)))

;; Get the key bindings
(let ((map completion-in-region-mode-map))
  (define-key map (kbd "C-n") #'my-mct-next-line-or-completion)
  (define-key map (kbd "C-p") #'my-mct-previous-line-or-completion)
  (define-key map (kbd "RET") #'my-mct-return-or-choose-completion))

;; Tweak the appearance
(setq completions-format 'one-column)
(setq completion-show-help nil)
(setq completion-auto-help t)

;; Optionally, tweak the appearance further
(setq completions-detailed t)
(setq completion-show-inline-help nil)
(setq completions-max-height 6)
(setq completions-highlight-face 'completions-highlight)
#+end_src

Note that the in-buffer completions will produce a new buffer window
below the current one.  Some users find this intrusive.  In such a
case, the use of a popup box is better.  Consider the ~corfu~ package
by Daniel Mendler, which uses such a popup ([[#h:c9ddedea-e279-4233-94dc-f8d32367a954][Alternatives]]).

* Usage
:PROPERTIES:
:CUSTOM_ID: h:884d6702-8666-4d89-87a2-7d74843653f3
:END:

This section outlines the various patterns of interaction that MCT
establishes.

** Cyclic behaviour for mct-mode
:PROPERTIES:
:CUSTOM_ID: h:68c61a76-1d64-4f62-a77a-52e7b66a68fe
:END:
#+cindex: Cyclic behaviour in the minibuffer

When ~mct-mode~ is enabled, some new keymaps are activated
which add commands for cycling between the minibuffer and the
completions.  Suppose the following standard layout:

#+begin_example
-----------------
|        |      |
| Buffers| Buf  |
|        |      |
-----------------
|        |      |
| Buf    | Buf  |
|        |      |
-----------------
-----------------
|               |
|  Completions  |
|               |
-----------------
-----------------
|  Minibuffer   |
-----------------
#+end_example

#+findex: mct-switch-to-completions-top
#+findex: mct-switch-to-completions-bottom
When inside the minibuffer, pressing =C-n= (or down arrow) takes you to
the top of the completions, while =C-p= (or up arrow) moves to the bottom.
The commands are ~mct-switch-to-completions-top~ for the former and
~mct-switch-to-completions-bottom~ for the latter.  If the =*Completions*=
are not shown, then the buffer pops up automatically and point moves to
the given position.

#+findex: mct-previous-completion-or-mini
#+findex: mct-next-completion-or-mini
Similarly, while inside the =*Completions*= buffer, =C-p= (or up arrow) at
the top of the buffer switches to the minibuffer, while =C-n= (or down
arrow) at the bottom of the buffer also goes to the minibuffer.  If
point is anywhere else inside the buffer, those key bindings perform a
regular line motion (if the =*Completions*= are set to a grid view, then
the left and right arrow keys perform the corresponding lateral
motions).  The commands are ~mct-previous-completion-or-mini~ and
~mct-next-completion-or-mini~.  Both accept an optional numeric argument.
If the Nth line lies outside the boundaries of the completions' buffer,
they move the point to the minibuffer.

#+findex: mct-list-completions-toggle
The display of the =*Completions*= can be toggled at any time from inside
the minibuffer with =C-l= (mnemonic is "[l]ist completions" and the
command is ~mct-list-completions-toggle~).

** Selecting candidates with mct-mode
:PROPERTIES:
:CUSTOM_ID: h:bb445062-2e39-4082-a868-2123bfb793cc
:END:
#+cindex: Candidate selection for minibuffer completion

There are several ways to select a completion candidate with
~mct-mode~.

1. Suppose that you are typing =mod= with the intent to select the
   =modus-themes.el= buffer.  To complete the candidate follow up =mod= with
   the =TAB= key (~minibuffer-complete~).  If the match is unique, the text
   will be expanded.  Otherwise the =*Completions*= buffer will appear.
   This does not exit the minibuffer, meaning that it does not confirm
   your choice.  To confirm your choice, use =RET=.  If you ever make a
   mistake and expand the wrong candidate, just use ~undo~.  Lastly note
   that if the candidates meet the ~completion-cycle-threshold~ hitting
   =TAB= again will switch between them.

   #+findex: mct-choose-completion-exit
2. While cycling through the completions' buffer, type =RET= to select and
   confirm the current candidate (~mct-choose-completion-exit~).  This
   works for all types of completion prompts.

   #+findex: mct-choose-completion-no-exit
3. Similar to the above, but without exiting the minibuffer (i.e. to
   confirm your choice) is ~mct-choose-completion-no-exit~ which is bound
   to =TAB= in the completions' buffer.  This is particularly useful for
   certain contexts where selecting a candidate does not necessarily
   mean that the process has to be finalised (e.g. when using
   ~find-file~).  In those cases, the event triggered by =TAB= is followed
   by the renewal of the list of completions, where relevant (e.g. =TAB=
   over a directory in ~find-file~, which then shows the contents of that
   directory).

   The command can correctly expand completion candidates even when the
   active style in ~completion-styles~ is =partial-completion=.  In other
   words, if the minibuffer contains input like =~/G/P/m= and the point is
   in the completions' buffer over =Git/Projects/mct/= the minibuffer'
   contents will become =~/Git/Projects/mct/= and then show the contents
   of that directory.

   #+findex: mct-edit-completion
4. Type =M-e= (~mct-edit-completion~) in the completions' buffer to place
   the current candidate in the minibuffer, without exiting the session.
   This allows you to edit the text before confirming it.  If point is
   in the minibuffer before performing this action, the current
   candidate is either the one at the top of the completions' buffer or
   that which is under the last known point in said buffer (the last
   known position is reset when the window is deleted).  Internally,
   ~mct-edit-completion~ uses ~mct-choose-completion-no-exit~ to expand the
   completion candidate, so it retains its behaviour (as explained right
   above).

   #+findex: mct-focus-minibuffer
   Sometimes there is a need to switch to the minibuffer without
   selecting the candidate at point, such as to retype some part of the
   input.  In those cases, type =e= in the completions' buffer to move to
   the minibuffer.  The command is called ~mct-focus-minibuffer~, which
   can also be assigned to the global keymap, though MCT leaves such a
   decision up to the user (same for ~mct-focus-mini-or-completions~).

   #+findex: mct-choose-completion-dwim
5. In prompts that allow the selection of multiple candidates
   (internally via the ~completing-read-multiple~ function) using =M-RET=
   (~mct-choose-completion-dwim~) in the =*Completions*= will append the
   candidate at point to the list of selections and keep the completions
   available so that another item may be selected.  Any of the
   aforementioned applicable methods can confirm the final selection.
   If, say, you want to pick a total of three candidates, do =M-RET= for
   the first two and =RET= (~mct-choose-completion-exit~) for the last one.
   In contexts that are not CRM-powered, the =M-RET= has the same effect
   as =TAB= (~mct-choose-completion-no-exit~).

   [[#h:162f232d-1e9d-4756-90d3-d6bf5bb4d8ef][Indicator for completing-read-multiple]].

   #+findex: mct-complete-and-exit
6. When point is at the minibuffer, select the current candidate in
   the completions buffer with =C-RET= (~mct-complete-and-exit~), which
   has the same effect as first completing with =TAB= and then
   immediately exit the minibuffer with the completed candidate as the
   selected one.

   #+findex: mct-next-completion-group
   #+findex: mct-previous-completion-group
7. Emacs 28 has the ability to group candidates inside the completions'
   buffer under headings.  For example, the Consult package makes use of
   those ([[#h:03227254-d467-4147-b8cf-2fe05a2e279b][Third-party extensions]]).  MCT provides motions that jump
   between such headings, placing the point at the first candidate right
   below the heading's text.  Use =M-n= (~mct-next-completion-group~)
   and =M-p= (~mct-previous-completion-group~) to move to the next or
   previous one, respectively (also work with they keys for
   ~forward-paragraph~ and ~backward-paragraph~).  Both commands accept
   an optional numeric argument.  For the sake of avoiding surprises,
   these commands do not cycle between the completions and the
   minibuffer: they stop at the first or last heading.

* Keymaps
:PROPERTIES:
:CUSTOM_ID: h:b3178edd-f340-444c-8426-fe84f23ac9ea
:END:
#+cindex: Keymaps
#+vindex: mct-completion-list-mode-map
#+vindex: mct-minibuffer-local-completion-map

MCT defines its own keymaps, which extend those that are active in the
minibuffer and the =*Completions*= buffer, respectively:

+ ~mct-completion-list-mode-map~
+ ~mct-minibuffer-local-completion-map~

You can invoke ~describe-keymap~ to learn more about them.

If you want to edit any key bindings, do it in these keymaps, not in
those they extend and override (the names of the original ones are the
same as above, minus the =mct-= prefix).

* User-level tweaks or custom code
:PROPERTIES:
:CUSTOM_ID: h:2630a7a3-1b11-4e9d-8282-0ea3bf9e2a5b
:END:
#+cindex: Custom tweaks or extensions

In this section we cover custom code that builds on what MCT offers.

** Sort completion candidates on Emacs 29
:PROPERTIES:
:CUSTOM_ID: h:493922c7-efdc-4b63-aa96-b31c684eb4fa
:END:
#+cindex: Sorting completions

[ As part of {{{development-version}}}, MCT provides the user option
  ~mct-sort-by-command-or-category~ and sets the ~completions-sort~
  accordingly ([[#h:d5cd6e2e-d121-425c-96ec-f8bc9c630dd2][Sort completions based on the command or completion category]]).
  The information herein is thus not needed, but may still be useful
  in writing a custom sort function. ]

Starting with Emacs 29 (current development target), the user option
~completions-sort~ controls the sorting method of candidates in the
=*Completions*= buffer.  Beside the default of using ~string-lessp~, it
accepts a custom function.  Consider any of the following examples:

#+begin_src emacs-lisp
;; Some sorting functions...
(defun my-sort-by-alpha-length (elems)
  "Sort ELEMS first alphabetically, then by length."
  (sort elems (lambda (c1 c2)
                (or (string-version-lessp c1 c2)
                    (< (length c1) (length c2))))))

(defun my-sort-by-history (elems)
  "Sort ELEMS by minibuffer history.
Use `mct-sort-sort-by-alpha-length' if no history is available."
  (if-let ((hist (and (not (eq minibuffer-history-variable t))
                      (symbol-value minibuffer-history-variable))))
      (minibuffer--sort-by-position hist elems)
    (my-sort-by-alpha-length elems)))

(defun my-sort-multi-category (elems)
  "Sort ELEMS per completion category."
  (pcase (mct--completion-category)
    ('nil elems) ; no sorting
    ('kill-ring elems)
    ('project-file (my-sort-by-alpha-length elems))
    (_ (my-sort-by-history elems))))

;; Specify the sorting function.
(setq completions-sort #'my-sort-multi-category)
#+end_src

[[#h:1f42c4e6-53c1-4e8a-81ef-deab70822fa4][Known completion categories]].

** Indicator for completing-read-multiple
:PROPERTIES:
:CUSTOM_ID: h:162f232d-1e9d-4756-90d3-d6bf5bb4d8ef
:END:
#+cindex: CRM indicator

[ As part of {{{development-version}}}, this feature is built into the
  MCT code ([[#h:211065de-6ea8-4cfd-b0a2-c1f28a5ae341][Show an indicator for ~completing-read-multiple~ prompts]]).
  I decided that it is better to have it on by default, otherwise the
  ~completing-read-multiple~ prompts are hard to identify. ]

Previous versions of MCT would prepend a =[CRM]= tag to the minibuffer
prompt of commands powered by ~completing-read-multiple~.  While this is a
nice usability enhancement, it is not specific to MCT and thus should
not be part of =mct.el=.  Use this in your init file instead:

#+begin_src emacs-lisp
;; Add prompt indicator to `completing-read-multiple'.  We display
;; [`completing-read-multiple': <separator>], e.g.,
;; [`completing-read-multiple': ,] if the separator is a comma.  This
;; is adapted from the README of the `vertico' package by Daniel
;; Mendler.  I made some small tweaks to propertize the segments of
;; the prompt.
(defun crm-indicator (args)
  (cons (format "[`crm-separator': %s]  %s"
                (propertize
                 (replace-regexp-in-string
                  "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                  crm-separator)
                 'face 'error)
                (car args))
        (cdr args)))

(advice-add #'completing-read-multiple :filter-args #'crm-indicator)
#+end_src

** Ido-style navigation through directories
:PROPERTIES:
:CUSTOM_ID: h:9a6746dd-0be9-4e29-ac40-0af9612d05a2
:END:

Older versions of MCT had a command for file navigation that would
delete the whole directory component before point, effectively going
back up one directory.  While the functionality can be useful, it is not
integral to the MCT experience and thus should not belong in =mct.el=.
Add this to your own configuration file instead:

#+begin_src emacs-lisp
;; Adaptation of `icomplete-fido-backward-updir'.
(defun my-backward-updir ()
  "Delete char before point or go up a directory."
  (interactive nil mct-mode)
  (cond
   ((and (eq (char-before) ?/)
         (eq (mct--completion-category) 'file))
    (when (string-equal (minibuffer-contents) "~/")
      (delete-minibuffer-contents)
      (insert (expand-file-name "~/"))
      (goto-char (line-end-position)))
    (save-excursion
      (goto-char (1- (point)))
      (when (search-backward "/" (minibuffer-prompt-end) t)
        (delete-region (1+ (point)) (point-max)))))
   (t (call-interactively 'backward-delete-char))))

(define-key minibuffer-local-filename-completion-map (kbd "DEL") #'my-backward-updir)
#+end_src

* Third-party extensions
:PROPERTIES:
:CUSTOM_ID: h:03227254-d467-4147-b8cf-2fe05a2e279b
:END:
#+cindex: Extra packages

MCT only tweaks the default minibuffer.  To get more out of it, consider
these exceptionally well-crafted extras:

+ [[https://github.com/minad/consult/][Consult]] by Daniel Mendler :: Adds several commands that make
  interacting with the minibuffer more powerful.  There also are
  multiple packages that build on it, such as [[https://github.com/karthink/consult-dir][consult-dir]] by Karthik
  Chikmagalur and [[https://codeberg.org/jao/consult-notmuch][consult-notmuch]] by José Antonio Ortega Ruiz.

+ [[https://github.com/oantolin/embark/][Embark]] by Omar Antolín Camarena :: Provides configurable contextual
  actions for completions and many other constructs inside buffers.  A
  genius package!

+ [[https://github.com/minad/marginalia][Marginalia]] by Daniel and Omar :: Displays informative annotations for
  all known types of completion candidates.

+ [[https://github.com/oantolin/orderless/][Orderless]] by Omar :: A completion style that matches a variety of
  patterns (regexp, flex, initialism, etc.) regardless of the order they
  appear in.

+ [[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]] by Itai Y. Efrat :: Glue code that adds icons
  from the =all-the-icons= package to the =*Completions*= buffer.  It can
  make things prettier and/or more informative, while it can also be
  combined with Marginalia.

MCT does not support the use-case of ~completion-in-region~.  This is
the kind of completion session that is done inside the buffer and does
not involve the minibuffer.  However, you may prefer:

+ [[https://github.com/minad/corfu/][Corfu]] by Daniel Mendler :: An interface for the ~completion-in-region~
  which uses a child frame (basically a pop-up) at the position of the
  cursor to display candidates.  As with all of Daniel's packages, Corfu
  aims for a clean implementation that does the right thing by being
  consistent with core Emacs mechanisms.

+ [[https://github.com/minad/cape][Cape]] also by Daniel :: Additional ~completion-at-point-functions~
  (CAPFs) that extend those of core Emacs.  These backends can be used
  by packages that visualise ~completion-in-region~.

** Enable Consult previews
:PROPERTIES:
:CUSTOM_ID: h:85268cb1-9d49-452c-ba5f-c9215d4b8b62
:END:

One of the nice features of the Consult package is the ability to
preview the candidate at point.  All we need to enable it in the
=*Completions*= buffer is the following snippet:

#+begin_src emacs-lisp
(add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)
#+end_src

* Alternatives
:PROPERTIES:
:CUSTOM_ID: h:c9ddedea-e279-4233-94dc-f8d32367a954
:END:
#+cindex: Alternatives to MCT

In the grand scheme of things, it may be helpful to think of MCT as
proof-of-concept on how the default Emacs completion can become more
expressive.  MCT's value rests in its potential to inspire developers to
(i) patch Emacs so that its out-of-the-box completion is more
interactive, and (ii) expose the shortcomings in the current
implementation of the =*Completions*= buffer, which should again provide
an impetus for further changes to Emacs.  Otherwise, MCT is meant for
users who can tolerate the status quo and simply want a thin layer of
interactivity for minibuffer completion, in-buffer completion, and their
intersection with the Completions' buffer.

Like MCT, these alternatives provide a thin layer of functionality over
the built-in infrastructure.  Unlike MCT, they are not constrained by
the design of the =*Completions*= buffer and concomitant functionality.
They all make for a natural complement to the standard Emacs experience
(also [[#h:03227254-d467-4147-b8cf-2fe05a2e279b][Extensions]]).

+ [[https://github.com/minad/vertico][Vertico]] by Daniel Mendler :: this is a more mature and feature-rich
  package with a large user base and a highly competent maintainer.

  Vertico has some performance optimizations on how candidates are
  sorted and presented, which means that it displays results right away
  without any noticeable performance penalty.  Whereas MCT does not
  change the underlying behaviour of how candidates are displayed.  As
  such, MCT will be slower in scenaria where there are lots of
  candidates because core Emacs lacks those optimizations.  One such
  case is with the ~describe-symbol~ (=C-h o=) prompt.  If the user asks for
  the completions' buffer without inputting any character (so without
  narrowing the list), there will be a noticeable delay before the
  buffer is rendered.  This is mitigated in MCT by the requirement for
  ~mct-minimum-input~, though the underlying mechanics remain intact.

  In terms of the interaction model, the main difference between Vertico
  and MCT is that the former uses the minibuffer by default and shows
  the completions there.  The minibuffer is expanded to show the
  candidates in a vertical list.  Whereas MCT keeps the =*Completions*=
  buffer and the minibuffer as separate entities, the way standard Emacs
  does it.

  The presence of a fully fledged buffer means that the user can invoke
  all relevant commands at their disposal, such as to write the buffer
  to a file for future review, use Isearch to move around, copy a string
  or rectangle to a register, and so on.

  Vertico has official extensions which can make it work exactly like
  MCT without any of MCT's drawbacks.  These extensions can also expand
  Vertico's powers such as by providing granular control over the exact
  style of presentation for any given completion category (e.g. display
  Imenu in a separate buffer, show the ~switch-to-buffer~ list
  horizontally in the minibuffer, and present ~find-file~ in a vertical
  list---whatever the user wants).

  All things considered, there is no compelling reason why one may
  prefer MCT over Vertico in terms of the available functionality:
  Vertico is better.

+ Icomplete and fido-mode (built-in, multiple authors) :: Icomplete is
  closer in spirit to Vertico, as it too uses the minibuffer to display
  completion candidates.  By default, it presents the list horizontally,
  though there exists ~icomplete-vertical-mode~ (and ~fido-vertical-mode~).

  For our purposes, Icomplete and Fido are the same in terms of the
  paradigm they follow.  The latter is a re-spin of the former, as it
  adjusts certain variables and binds some commands for the convenience
  of the end-user.  ~fido-mode~ and its accoutrements are defined in
  =icomplete.el=.

  What MCT borrows from Icomplete is for the input delay (explained
  elsewhere in this document).  Internally, I also learnt how to extend
  local keymaps by studying =icomplete.el=.

  I had used Icomplete for several months before moving to what now has
  become =mct.el=.  I think it is excellent at providing a thin layer over
  the built-in infrastructure.

* Acknowledgements
:PROPERTIES:
:CUSTOM_ID: h:e2f73255-55f1-4f4c-8d8b-99c9a4a83192
:END:
#+cindex: Contributors

MCT is meant to be a collective effort.  Every bit of help matters.

+ Author/maintainer :: Protesilaos Stavrou.

+ Contributions to code or documentation :: Daniel Mendler, James
  Norman Vladimir Cash, Jessie Hu, José Antonio Ortega Ruiz, Juri
  Linkov, Philip Kaludercic, Tomasz Hołubowicz.

+ Ideas and user feedback :: Andrew Tropin, Benjamin (@zealotrush), Case
  Duckworth, Chris Burroughs, Jonathan Irving, José Antonio Ortega Ruiz,
  Kostadin Ninev, Manuel Uberti, Morgan Willcock, Philip Kaludercic,
  Theodor Thornhill, Tomasz Hołubowicz, Z.Du.  As well as users:
  danrobi11.

+ Packaging :: Andrew Tropin and Nicolas Goaziou (Guix).

+ Inspiration for certain features :: =icomplete.el= (built-in---multiple
  authors), Daniel Mendler (=vertico=), Omar Antolín Camarena (=embark=,
  =live-completions=).

* Official sources
:PROPERTIES:
:CUSTOM_ID: h:32f474f2-f596-4a7e-a0da-023344136be1
:END:

+ Manual :: <https://protesilaos.com/emacs/mct>
+ Change log :: <https://protesilaos.com/emacs/mct-changelog>
+ Source code :: <https://github.com/protesilaos/mct>
+ Mailing list :: <https://lists.sr.ht/~protesilaos/mct>

* GNU Free Documentation License
:PROPERTIES:
:APPENDIX: t
:CUSTOM_ID: h:2d84e73e-c143-43b5-b388-a6765da974ea
:END:

#+texinfo: @include doclicense.texi

#+begin_export html
<pre>

                GNU Free Documentation License
                 Version 1.3, 3 November 2008


 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of
the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
https://www.gnu.org/licenses/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
"Massive Multiauthor Collaboration" (or "MMC") contained in the site
means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in
part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole or
in part into the MMC, (1) had no cover texts or invariant sections, and
(2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</pre>
#+end_export

#+html: <!--

* Indices
:PROPERTIES:
:CUSTOM_ID: h:0325b677-0b1b-426e-a5d5-ddc225fde6fa
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:40430725-fd7f-47ac-9a29-913942e84a57
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:91f3c207-8149-4f9a-89cf-b8726e4e4415
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:CUSTOM_ID: h:2b11517a-b67f-494f-b111-1c6195e8a2fc
:END:

#+html: -->
